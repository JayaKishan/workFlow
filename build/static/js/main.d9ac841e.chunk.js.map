{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["panelStyle","stageTitle","Register","state","formFields","stageName","stageNumber","Users","Forms","desiganation","previous","handleClick","bind","formHandler","e","this","target","name","value","setState","preventDefault","axios","post","then","response","console","log","data","_id","localStorage","setItem","catch","error","arr","style","id","onSubmit","type","placeholder","onChange","map","i","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0RAGIA,EAAa,CACf,YAAa,MACb,OAAU,cAGRC,EAAa,CACf,MAAS,QACT,gBAAiB,OACjB,YAAa,UAkFAC,E,YA9Eb,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXC,WAAY,CACVC,UAAW,GACXC,YAAa,GACbC,MAAO,GACPC,MAAO,GACPC,aAAc,GACdC,SAAU,MAKd,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAhBP,E,yEAoBFE,GACV,IAAIV,EAAU,eAAQW,KAAKZ,MAAMC,YACjCA,EAAWU,EAAEE,OAAOC,MAAQH,EAAEE,OAAOE,MACrCH,KAAKI,SAAS,CACZf,iB,kCAOQU,GACVA,EAAEM,iBACFC,IAAMC,KAAK,0CAA2CP,KAAKZ,MAAMC,YAC9DmB,MAAK,SAAUC,GACdC,QAAQC,IAAIF,EAASG,KAAKC,KAC1BC,aAAaC,QAAQ,SAAUN,EAASG,KAAKC,QAE9CG,OAAM,SAAUC,GACfP,QAAQC,IAAIM,Q,+BAIhB,IAAIC,EAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAEnC,OACE,6BACE,yBAAKC,MAAOlC,GACV,yBAAKmC,GAAG,aAAaD,MAAOjC,GAA5B,SAA8C,oCAC9C,6BACE,0BAAMmC,SAAUrB,KAAKF,aACnB,+CADF,IAC+B,6BAD/B,IACsC,2BAAOwB,KAAK,OAAOpB,KAAK,YAAYqB,YAAY,aAAaC,SAAUxB,KAAKJ,YAAaO,MAAOH,KAAKZ,MAAMC,WAAWC,YAD5J,IAC0K,6BACxK,kDAFF,IAEkC,6BAFlC,IAEyC,4BAAQY,KAAK,cAAcsB,SAAUxB,KAAKJ,YAAaO,MAAOH,KAAKZ,MAAMC,WAAWE,aACxH2B,EAAIO,KAAI,SAAC1B,EAAG2B,GAAJ,OACP,4BAAQvB,MAAOJ,GAAIA,OAJzB,IAOY,6BACV,0CARF,IAQ0B,6BAR1B,IAQiC,4BAAQG,KAAK,QAAQsB,SAAUxB,KAAKJ,YAAaO,MAAOH,KAAKZ,MAAMC,WAAWG,OAC1G0B,EAAIO,KAAI,SAAC1B,EAAG2B,GAAJ,OACP,4BAAQvB,MAAOJ,GAAIA,OAVzB,IAYY,6BACV,0CAbF,IAa0B,6BAb1B,IAaiC,4BAAQG,KAAK,QAAQsB,SAAUxB,KAAKJ,YAAaO,MAAOH,KAAKZ,MAAMC,WAAWI,OAC1GyB,EAAIO,KAAI,SAAC1B,EAAG2B,GAAJ,OACP,4BAAQvB,MAAOJ,GAAIA,OAEd,6BACT,gDAlBF,IAkBgC,6BAlBhC,IAkBuC,2BAAOG,KAAK,eAAeqB,YAAY,cAAcC,SAAUxB,KAAKJ,YAAaO,MAAOH,KAAKZ,MAAMC,WAAWK,eAlBrJ,IAkBsK,6BAAM,6BAC1K,kD,GAtESiC,aCFHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEd1B,OAAM,SAAAC,GACLP,QAAQO,MAAMA,EAAM0B,c","file":"static/js/main.d9ac841e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nvar panelStyle = {\n  'max-width': '80%',\n  'margin': '100px auto'\n}\n\nvar stageTitle = {\n  'color': 'green',\n  'margin-bottom': '40px',\n  'font-size': '2.1rem'\n}\n\nclass Register extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      formFields: {\n        stageName: '',\n        stageNumber: '',\n        Users: '',\n        Forms: '',\n        desiganation: '',\n        previous: \"6\"\n      }\n\n\n    }\n    this.handleClick = this.handleClick.bind(this);\n    this.formHandler = this.formHandler.bind(this);\n  }\n\n\n  handleClick(e) {\n    let formFields = { ...this.state.formFields };\n    formFields[e.target.name] = e.target.value;\n    this.setState({\n      formFields\n    });\n  }\n\n\n\n\n  formHandler(e) {\n    e.preventDefault();\n    axios.post('http://192.168.1.6:5000/parallel/create', this.state.formFields)\n      .then(function (response) {\n        console.log(response.data._id);\n        localStorage.setItem('stage1', response.data._id);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n  render() {\n    let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    return (\n      <div>\n        <div style={panelStyle}>\n          <div id=\"stageTitle\" style={stageTitle}>Stage <span>1</span></div>\n          <div>\n            <form onSubmit={this.formHandler}>\n              <strong>Stage Name:</strong> <br /> <input type=\"text\" name=\"stageName\" placeholder=\"Stage Name\" onChange={this.handleClick} value={this.state.formFields.stageName} /> <br />\n              <strong>No. of stages:</strong> <br /> <select name=\"stageNumber\" onChange={this.handleClick} value={this.state.formFields.stageNumber}>\n                {arr.map((e, i) =>\n                  <option value={e}>{e}</option>\n                )}\n\n              </select> <br />\n              <strong>Users:</strong> <br /> <select name=\"Users\" onChange={this.handleClick} value={this.state.formFields.Users}>\n                {arr.map((e, i) =>\n                  <option value={e}>{e}</option>\n                )}\n              </select> <br />\n              <strong>Forms:</strong> <br /> <select name=\"Forms\" onChange={this.handleClick} value={this.state.formFields.Forms}>\n                {arr.map((e, i) =>\n                  <option value={e}>{e}</option>\n                )}\n              </select><br />\n              <strong>Designation:</strong> <br /> <input name=\"desiganation\" placeholder=\"Designation\" onChange={this.handleClick} value={this.state.formFields.desiganation} /> <br /><br />\n              <button>Submit</button>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Register\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}